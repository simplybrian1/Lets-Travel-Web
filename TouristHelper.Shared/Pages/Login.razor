@page "/login"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthProvider


<PageTitle>Login</PageTitle>

<h3 class="text-2xl font-semibold mb-4">Login to Let's Travel</h3>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="p-3 mb-4 rounded text-white" style="background-color:@(IsSuccess ? "green" : "red")">
        @Message
    </div>
}

<div class="space-y-4 max-w-md">
    <InputText class="w-full border p-2 rounded" @bind-Value="LoginForm.EmailOrPhone" placeholder="Email or Phone" />
    <InputText class="w-full border p-2 rounded" @bind-Value="LoginForm.Password" type="@PasswordInputType" placeholder="Password" />

    <div>
        <input type="checkbox" @bind="ShowPassword" class="mr-2" />
        <label>Show Password</label>
    </div>

    <button class="bg-blue-600 text-white px-4 py-2 rounded" @onclick="LoginTourist" disabled="@IsLoading">
        @if (IsLoading)
        {
            <span>Logging in...</span>
        }
        else
        {
            <span>Login</span>
        }
    </button>
</div>

@code {
    private TouristLoginDto LoginForm = new();
    private string Message = string.Empty;
    private bool IsSuccess = false;
    private bool IsLoading = false;
    private bool ShowPassword = false;

    private string PasswordInputType => ShowPassword ? "text" : "password";

    private async Task LoginTourist()
    {
        IsLoading = true;
        Message = string.Empty;

        try
        {
            var payload = new Dictionary<string, string>
            {
                ["EmailOrPhone"] = LoginForm.EmailOrPhone ?? "",
                ["Password"] = LoginForm.Password ?? ""
            };

            var response = await Http.PostAsJsonAsync("api/tourist/login", payload);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginApiResponse>();
                if (result?.success == true)
                {
                    IsSuccess = true;
                    Message = $"Welcome back, {result.full_name}!";

                    // ✅ Store JWT and user info in localStorage
                    await JS.InvokeVoidAsync("localStorage.setItem", "jwt_token", result.token);
                    await JS.InvokeVoidAsync("localStorage.setItem", "tourist_name", result.full_name);
                    await JS.InvokeVoidAsync("localStorage.setItem", "tourist_id", result.tourist_id?.ToString());

                    // ✅ Notify authentication state provider
                    if (AuthProvider is TouristHelper.Shared.Services.JwtAuthStateProvider jwtProvider)
                    {
                        jwtProvider.NotifyUserAuthentication(result.token!);
                    }

                    Nav.NavigateTo("/");
                    return;
                }
                else
                {
                    Message = result?.message ?? "Login failed.";
                    IsSuccess = false;
                }
            }
            else
            {
                var result = await response.Content.ReadFromJsonAsync<LoginApiResponse>();
                Message = result?.message ?? "Server error during login.";
                IsSuccess = false;
            }
        }
        catch (Exception ex)
        {
            Message = $"Error: {ex.Message}";
            IsSuccess = false;
        }

        IsLoading = false;
    }

    private class TouristLoginDto
    {
        public string? EmailOrPhone { get; set; }
        public string? Password { get; set; }
    }

    private class LoginApiResponse
    {
        public bool success { get; set; }
        public int code { get; set; }
        public string message { get; set; } = "";
        public int? tourist_id { get; set; }
        public string? full_name { get; set; }
        public string? token { get; set; }
        public DateTime? expires_at { get; set; }
    }
}
