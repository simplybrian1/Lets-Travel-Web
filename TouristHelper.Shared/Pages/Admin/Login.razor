@page "/admin/login"
@inject HttpClient Http
@inject NavigationManager Nav

<h3 class="text-xl font-bold mb-4">Admin Login</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="text-red-600">@ErrorMessage</p>
}

<div class="space-y-4">
    <input @bind="Email" placeholder="Email" class="input" />
    <input @bind="Password" placeholder="Password" type="password" class="input" />
    <button @onclick="PerformLogin" class="btn btn-primary">Login</button>
</div>

@code {
    private string Email = "";
    private string Password = "";
    private string ErrorMessage = "";

    private async Task PerformLogin()
    {
        ErrorMessage = "";

        var payload = new Dictionary<string, string>
        {
            { "Email", Email },
            { "Password", Password }
        };

        try
        {
            var response = await Http.PostAsJsonAsync("api/admin/login", payload);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();

                // Save JWT to localStorage (secure alternative: cookie + AuthenticationStateProvider)
                await JS.InvokeVoidAsync("localStorage.setItem", "adminToken", result.token);

                // Navigate to dashboard
                Nav.NavigateTo("/admin/dashboard");
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<ApiError>();
                ErrorMessage = error?.message ?? "Login failed.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Unexpected error: " + ex.Message;
        }
    }

    [Inject] private IJSRuntime JS { get; set; }

    private class LoginResponse
    {
        public bool success { get; set; }
        public int admin_id { get; set; }
        public string full_name { get; set; }
        public string token { get; set; }
        public DateTime expires_at { get; set; }
    }

    private class ApiError
    {
        public string message { get; set; }
    }
}
