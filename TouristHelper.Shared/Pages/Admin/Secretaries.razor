@page "/admin/secretaries"
@inject HttpClient Http
@inject IJSRuntime JS

<h2 class="text-2xl font-bold mb-4">Manage Secretaries</h2>

<!-- Add Secretary Button -->
<button class="bg-blue-600 text-white px-4 py-2 rounded mb-4" @onclick="ShowAddModal">➕ Add Secretary</button>

<!-- Secretaries Table -->
@if (isLoading)
{
    <p>Loading secretaries...</p>
}
else if (secretaries.Count == 0)
{
    <p class="text-gray-500">No secretaries found.</p>
}
else
{
    <table class="table-auto w-full border-collapse border border-gray-300">
        <thead class="bg-gray-100">
            <tr>
                <th class="border px-4 py-2">#</th>
                <th class="border px-4 py-2">Full Name</th>
                <th class="border px-4 py-2">Email</th>
                <th class="border px-4 py-2">Phone</th>
                <th class="border px-4 py-2">Created</th>
                <th class="border px-4 py-2">Last Login</th>
                <th class="border px-4 py-2">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var sec in secretaries)
            {
                <tr>
                    <td class="border px-4 py-2">@sec.SecretaryId</td>
                    <td class="border px-4 py-2">@sec.FullName</td>
                    <td class="border px-4 py-2">@sec.Email</td>
                    <td class="border px-4 py-2">@sec.PhoneNumber</td>
                    <td class="border px-4 py-2">@sec.CreatedAt.ToString("g")</td>
                    <td class="border px-4 py-2">@sec.LastLogin?.ToString("g")</td>
                    <td class="border px-4 py-2 text-center">
                        <button class="text-red-600" @onclick="@(() => DeleteSecretary(sec.SecretaryId))">🗑️</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Add Secretary Modal -->
@if (showAddModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white p-6 rounded shadow w-full max-w-md">
            <h3 class="text-xl font-semibold mb-4">Add New Secretary</h3>

            <div class="space-y-2">
                <input class="w-full border px-3 py-2" placeholder="Full Name" @bind="newSecretary.FullName" />
                <input class="w-full border px-3 py-2" placeholder="Email" @bind="newSecretary.Email" />
                <input class="w-full border px-3 py-2" placeholder="Phone Number" @bind="newSecretary.PhoneNumber" />
                <input class="w-full border px-3 py-2" placeholder="Password" type="password" @bind="newSecretary.Password" />
                <input class="w-full border px-3 py-2" placeholder="Profile Pic URL (optional)" @bind="newSecretary.ProfilePicUrl" />
            </div>

            <div class="mt-4 flex justify-between">
                <button class="bg-green-600 text-white px-4 py-2 rounded" @onclick="AddSecretary">Save</button>
                <button class="bg-gray-400 text-white px-4 py-2 rounded" @onclick="HideAddModal">Cancel</button>
            </div>
        </div>
    </div>
}

@code {
    private List<SecretaryViewModel> secretaries = new();
    private bool isLoading = true;
    private bool showAddModal = false;

    private SecretaryCreateModel newSecretary = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadSecretaries();
    }

    private async Task LoadSecretaries()
    {
        isLoading = true;
        var res = await Http.GetFromJsonAsync<ApiResult<List<SecretaryViewModel>>>("/api/admin/secretaryadmin/list");
        if (res?.Success == true)
            secretaries = res.Data ?? new();
        isLoading = false;
    }

    private void ShowAddModal() => showAddModal = true;
    private void HideAddModal() => showAddModal = false;

    private async Task AddSecretary()
    {
        var res = await Http.PostAsJsonAsync("/api/admin/secretaryadmin/add", newSecretary);
        var result = await res.Content.ReadFromJsonAsync<ApiResult>();
        if (result?.Success == true)
        {
            await JS.InvokeVoidAsync("alert", "Secretary added successfully.");
            showAddModal = false;
            newSecretary = new(); // Reset form
            await LoadSecretaries();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", result?.Message ?? "Failed to add.");
        }
    }

    private async Task DeleteSecretary(int id)
    {
        if (!await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete secretary #{id}?")) return;

        var res = await Http.DeleteAsync($"/api/admin/secretaryadmin/delete/{id}");
        var result = await res.Content.ReadFromJsonAsync<ApiResult>();
        if (result?.Success == true)
        {
            await JS.InvokeVoidAsync("alert", "Secretary deleted.");
            await LoadSecretaries();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", result?.Message ?? "Failed to delete.");
        }
    }

    public class SecretaryViewModel
    {
        public int SecretaryId { get; set; }
        public string FullName { get; set; } = "";
        public string Email { get; set; } = "";
        public string PhoneNumber { get; set; } = "";
        public DateTime CreatedAt { get; set; }
        public DateTime? LastLogin { get; set; }
    }

    public class SecretaryCreateModel
    {
        public string FullName { get; set; } = "";
        public string Email { get; set; } = "";
        public string PhoneNumber { get; set; } = "";
        public string Password { get; set; } = "";
        public string? ProfilePicUrl { get; set; }
    }

    public class ApiResult<T>
    {
        public bool Success { get; set; }
        public string? Message { get; set; }
        public T? Data { get; set; }
    }

    public class ApiResult
    {
        public bool Success { get; set; }
        public string? Message { get; set; }
    }
}
