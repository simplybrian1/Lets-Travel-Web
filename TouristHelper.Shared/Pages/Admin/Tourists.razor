@page "/admin/tourists"
@inject HttpClient Http
@inject NavigationManager Nav

<h1 class="text-2xl font-bold mb-4">🧳 Registered Tourists</h1>

@if (isLoading)
{
    <p class="text-gray-500">Loading tourists...</p>
}
else if (tourists?.Count == 0)
{
    <p class="text-red-500">No tourists found.</p>
}
else
{
    <div class="overflow-x-auto rounded-lg shadow border border-gray-200">
        <table class="min-w-full text-sm text-left table-auto">
            <thead class="bg-gray-100 border-b text-xs text-gray-600 uppercase">
                <tr>
                    <th class="px-4 py-2">#</th>
                    <th class="px-4 py-2">Full Name</th>
                    <th class="px-4 py-2">Email</th>
                    <th class="px-4 py-2">Phone</th>
                    <th class="px-4 py-2">Status</th>
                    <th class="px-4 py-2">Joined</th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y text-gray-800">
                @foreach (var t in tourists)
                {
                    <tr>
                        <td class="px-4 py-2">@t.TouristId</td>
                        <td class="px-4 py-2">@t.FullName</td>
                        <td class="px-4 py-2">@t.Email</td>
                        <td class="px-4 py-2">@t.PhoneNumber</td>
                        <td class="px-4 py-2">
                            <span class="@GetStatusBadgeClass(t.IsActive)">
                                @(t.IsActive ? "Active" : "Inactive")
                            </span>
                        </td>
                        <td class="px-4 py-2">@t.CreatedAt?.ToString("yyyy-MM-dd")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
@code {
    private bool isLoading = true;

    private List<TouristViewModel> tourists = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<TouristListResponse>("/api/admin/tourists");
            if (response != null && response.success)
            {
                tourists = response.tourists;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading tourists: " + ex.Message);
        }

        isLoading = false;
    }

    private string GetStatusBadgeClass(bool isActive)
    {
        return isActive
            ? "inline-block px-2 py-1 text-green-700 bg-green-100 rounded-full text-xs"
            : "inline-block px-2 py-1 text-red-700 bg-red-100 rounded-full text-xs";
    }

    public class TouristListResponse
    {
        public bool success { get; set; }
        public List<TouristViewModel> tourists { get; set; } = new();
    }

    public class TouristViewModel
    {
        public int TouristId { get; set; }
        public string FullName { get; set; }
        public string Email { get; set; }
        public string PhoneNumber { get; set; }
        public bool IsActive { get; set; }
        public DateTime? CreatedAt { get; set; }
    }
}
