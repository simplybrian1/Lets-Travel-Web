@page "/booking/hotel/{hotelId:int}"
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims

<style>
    .booking-wrapper {
        max-width: 600px;
        margin: 3rem auto;
        padding: 2rem;
        background: #ffffff;
        border-radius: 12px;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.05);
        border: 1px solid #d1d5db; /* gray-300 */
    }

    .booking-header {
        font-size: 1.75rem;
        font-weight: 700;
        color: #1f2937; /* gray-800 */
        margin-bottom: 1.5rem;
        text-align: center;
    }

    .hotel-name {
        font-size: 1.25rem;
        font-weight: 600;
        color: #047857; /* emerald-700 */
        margin-bottom: 1.5rem;
        text-align: center;
    }

    .form-input {
        width: 100%;
        border: 1px solid #d1d5db; /* gray-300 */
        border-radius: 6px;
        padding: 0.75rem 1rem;
        font-size: 0.95rem;
        color: #374151; /* gray-700 */
        margin-bottom: 1rem;
    }

    .form-checkbox {
        display: flex;
        align-items: center;
        margin-bottom: 1rem;
    }

    .form-checkbox input {
        margin-right: 0.5rem;
    }

    .submit-btn {
        background: #059669; /* emerald-600 */
        color: #ffffff;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 9999px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: background 0.2s ease;
        width: 100%;
    }

    .submit-btn:hover {
        background: #047857; /* emerald-700 */
    }

    .error-message {
        color: #dc2626; /* red-600 */
        margin-bottom: 1rem;
        text-align: center;
    }
</style>

<div class="booking-wrapper">
    <h2 class="booking-header">🏨 Hotel Booking</h2>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="error-message">@errorMessage</p>
    }

    @if (hotel == null)
    {
        <p class="error-message">Hotel not found.</p>
    }
    else
    {
        <h3 class="hotel-name">@hotel.Name</h3>

        <EditForm Model="@booking" OnValidSubmit="SubmitBooking">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <InputText class="form-input" @bind-Value="booking.RoomType" placeholder="Room Type (e.g., Deluxe, Single)" />

            <InputNumber class="form-input" @bind-Value="booking.NumberOfRooms" placeholder="Number of Rooms" />

            <InputDate class="form-input" @bind-Value="booking.CheckInDate" />

            <InputDate class="form-input" @bind-Value="booking.CheckOutDate" />

            <div class="form-checkbox">
                <InputCheckbox @bind-Value="booking.IncludeFood" />
                <label>Include Food</label>
            </div>

            <InputText class="form-input" @bind-Value="booking.AccommodationType" readonly />

            <button type="submit" class="submit-btn">✅ Confirm Booking</button>
        </EditForm>
    }
</div>

@code {
    [Parameter] public int hotelId { get; set; }

    private HotelDto? hotel;
    private HotelBookingRequest booking = new();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var hotels = await Http.GetFromJsonAsync<List<HotelDto>>("api/hotels/list");
        hotel = hotels?.FirstOrDefault(h => h.HotelId == hotelId);

        if (hotel != null)
        {
            var typeResponse = await Http.GetFromJsonAsync<AccommodationTypeResponse>($"api/hotels/accommodation-type/{hotel.HotelId}");
            string accommodationType = typeResponse?.AccommodationType ?? "";

            var token = await JS.InvokeAsync<string>("localStorage.getItem", "jwt_token");
            int touristId = GetTouristIdFromJwt(token);

            booking = new HotelBookingRequest
            {
                TouristId = touristId,
                HotelId = hotel.HotelId,
                CheckInDate = DateTime.Today,
                CheckOutDate = DateTime.Today.AddDays(1),
                IncludeFood = false,
                AccommodationType = accommodationType
            };
        }
    }

    private async Task SubmitBooking()
    {
        errorMessage = null;
        var response = await Http.PostAsJsonAsync("api/hotels/book", booking);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<ApiResponse>();
            if (result?.Success == true)
            {
                Nav.NavigateTo($"/booking/confirmation/hotel/{result.BookingId}");
            }
            else
            {
                errorMessage = result?.Message ?? "Booking failed.";
            }
        }
        else
        {
            var raw = await response.Content.ReadAsStringAsync();
            errorMessage = $"API Error: {raw}";
        }
    }

    private int GetTouristIdFromJwt(string token)
    {
        if (string.IsNullOrWhiteSpace(token))
            return 0;

        var handler = new JwtSecurityTokenHandler();
        var jwt = handler.ReadJwtToken(token);

        var idClaim = jwt.Claims.FirstOrDefault(c => c.Type == "tourist_id" || c.Type == ClaimTypes.NameIdentifier || c.Type == "sub");
        return idClaim != null && int.TryParse(idClaim.Value, out var id) ? id : 0;
    }

    public class HotelDto
    {
        public int HotelId { get; set; }
        public string Name { get; set; } = "";
        public string Image { get; set; } = "";
    }

    public class HotelBookingRequest
    {
        public int TouristId { get; set; }
        public int HotelId { get; set; }
        public string RoomType { get; set; } = "";
        public int NumberOfRooms { get; set; }
        public DateTime CheckInDate { get; set; }
        public DateTime CheckOutDate { get; set; }
        public bool IncludeFood { get; set; }
        public string AccommodationType { get; set; } = "";
        public string? IPAddress { get; set; }
    }

    public class ApiResponse
    {
        [JsonPropertyName("success")]
        public bool Success { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; } = "";

        [JsonPropertyName("booking_id")]
        public int BookingId { get; set; }
    }

    public class AccommodationTypeResponse
    {
        [JsonPropertyName("accommodationType")]
        public string AccommodationType { get; set; } = "";
    }
}
