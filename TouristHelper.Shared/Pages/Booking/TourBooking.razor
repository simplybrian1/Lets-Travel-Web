@page "/booking/tour/{TourId:int}"
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using Microsoft.JSInterop
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthProvider

<h3>Book This Tour</h3>

@if (!IsAuthenticated)
{
    <p class="text-red-600">You must be logged in to book a tour.</p>
}
else if (Tour == null)
{
    <p>Loading tour details...</p>
}
else
{
    <div class="p-4 bg-white rounded shadow max-w-md mx-auto">
        <h4 class="text-lg font-bold">@Tour.name</h4>
        <p>@Tour.description</p>
        <img src="@Tour.image_url" alt="@Tour.name" class="w-full h-48 object-cover rounded my-2" />

        <div class="mb-4">
            <label>Adults:</label>
            <input type="number" @bind="Adults" min="0" class="border p-1 w-full" />
        </div>

        <div class="mb-4">
            <label>Children:</label>
            <input type="number" @bind="Children" min="0" class="border p-1 w-full" />
        </div>

        <div class="mb-4">
            <label>Time of Travel:</label>
            <input type="date" @bind="TimeOfTravel" class="border p-1 w-full" />
        </div>

        <div class="mb-4">
            <label>Additional Notes:</label>
            <textarea @bind="Notes" class="border p-1 w-full" rows="3" placeholder="Optional..."></textarea>
        </div>

        <button class="book-btn" @onclick="SubmitBooking">Submit Booking</button>

        @if (!string.IsNullOrEmpty(StatusMessage))
        {
            <p class="mt-3 text-red-600">@StatusMessage</p>
        }
    </div>
}

@code {
    [Parameter] public int TourId { get; set; }

    private TourDto? Tour;
    private int Adults = 1;
    private int Children = 0;
    private DateTime TimeOfTravel = DateTime.Today;
    private string? Notes;
    private bool IsAuthenticated = false;
    private string StatusMessage = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        IsAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        if (!IsAuthenticated) return;

        try
        {
            var tours = await Http.GetFromJsonAsync<List<TourDto>>("api/tours/list");
            Tour = tours?.FirstOrDefault(t => t.tour_id == TourId);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine("Error loading tour: " + ex.Message);
        }
    }

    private async Task SubmitBooking()
    {
        if (Adults < 0 || Children < 0 || TimeOfTravel < DateTime.Today)
        {
            StatusMessage = "Please enter valid booking details.";
            return;
        }

        var token = await JS.InvokeAsync<string>("localStorage.getItem", "jwt_token");

        if (string.IsNullOrWhiteSpace(token))
        {
            StatusMessage = "You are not logged in.";
            return;
        }

        var request = new HttpRequestMessage(HttpMethod.Post, "api/tours/book-tour")
        {
            Content = JsonContent.Create(new
            {
                TourId,
                Adults,
                Children,
                TimeOfTravel,
                Notes
            })
        };
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var res = await Http.SendAsync(request);

        if (res.IsSuccessStatusCode)
        {
            var result = await res.Content.ReadFromJsonAsync<BookingResponse>();
            Nav.NavigateTo($"/booking/confirmation/{result?.bookingId}");
        }
        else
        {
            var errorText = await res.Content.ReadAsStringAsync();
            StatusMessage = $"Booking failed: {res.StatusCode} - {errorText}";
        }
    }

    public class BookingResponse
    {
        public bool success { get; set; }
        public string message { get; set; } = "";
        public int bookingId { get; set; }
    }

    public class TourDto
    {
        public int tour_id { get; set; }
        public string name { get; set; } = "";
        public string description { get; set; } = "";
        public string image_url { get; set; } = "";
        public decimal price_per_adult { get; set; }
        public decimal price_per_child { get; set; }
        public int duration_days { get; set; }
        public bool is_featured { get; set; }
    }
}
